name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:  # 저장소에서 코드 가져오기
      - name: source code checkout
        uses: actions/checkout@v4

      - name: jdk install #jdk 설치하고 애플리케이션 빌드하기
        uses: actions/setup-java@v4
        with:
          java-version: 17 #java 버전 설정
          distribution: 'temurin' #java 배포판 설정

      - name: application build #gradle로 빌드하기
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: Docker 이미지 생성 & tag 붙이기
        run: docker build -t ${{ secrets.DOCKER_USER }}/web-app:latest .

      - name: dockerhub login #도커허브로 로그인하기
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: dockerhub 에 생성한 이미지 푸시하기
        run: docker push ${{ secrets.DOCKER_USER }}/web-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps: # EC2 에 접속하기(SSH)
      - name: SSH 로 EC2 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            # dockerhub 에 토큰을 가지고 로그인
            echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
            # docker 이미지 풀(땡겨오기)
            docker pull ${{ secrets.DOCKER_USER }}/web-app:latest
            # 기존에 컨테이너 중지 & 삭제
            docker stop web-app || true
            docker rm web-app || true
            # 새로운 컨테이너 실행
            docker run -d -p 8080:8080 -- name web-app ${{ secrets.DOCKER_USER }}/web-app:latest